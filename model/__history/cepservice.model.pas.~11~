unit cepservice.model;

interface

uses System.SysUtils, FireDAC.Comp.Client, FireDAC.Stan.Param, System.Classes, System.Net.HttpClient;

type
  TCEPService = class

  public
    function ConsultaCep(const ACep: string; AFormatJSON: Boolean): string;
    function ConsultaEndereco(Logradouro, Cidade, Estado: string; FormatoJSON: Boolean): string;

  end;

implementation

{ TCEPService }

function TCEPService.ConsultaCep(const ACep: string; AFormatJSON: Boolean): string;
var HTTPClient: THTTPClient;
    Response, URL: string;
    ResponseStream: TStringStream;
begin
  HTTPClient := THTTPClient.Create;
  ResponseStream := TStringStream.Create;
  try
    // url para acesso ao webservice
    if AFormatJSON then
      URL := 'https://viacep.com.br/ws/' + ACep + '/json/'
    else
      URL := 'https://viacep.com.br/ws/' + ACep + '/xml/';

    HTTPClient.Get(URL, ResponseStream);
    Response := ResponseStream.DataString;
    Result := Response;
  finally
    FreeAndNil(HTTPClient);
    FreeAndNil(ResponseStream);
  end;
end;

function TCEPService.ConsultaEndereco(Logradouro, Cidade, Estado: string; FormatoJSON: Boolean): string;
var HTTPClient: THTTPClient;
    Response, URL: string;
    ResponseStream: TStringStream;
begin
  HTTPClient := THTTPClient.Create;
  ResponseStream := TStringStream.Create;
  try
    if (Length(Logradouro) < 3) or (Length(Cidade) <3) or (Length(Estado) < 2) then
      raise Exception.Create('Parâmetros de endereço inválidos! Verifique o Logradouro, Localidade ou UF ');

    //  URL da consulta no ViaCEP
    if FormatoJSON then
      URL := Format('https://viacep.com.br/ws/%s/%s/%s/json/', [Estado, Cidade, Logradouro])
    else
      URL := Format('https://viacep.com.br/ws/%s/%s/%s/xml/', [Estado, Cidade, Logradouro]);

    // Fazer a requisição ao web service
    HTTPClient.Get(URL, ResponseStream);
    Response := ResponseStream.DataString;
    
    Result := Response;
    
  finally
    FreeAndNil(HTTPClient);
    FreeAndNil(ResponseStream);
  end;


end;

end.
