unit endereco.model;

interface

uses System.SysUtils, System.JSON, System.Variants, XMLDoc, XMLIntF, FireDAC.Comp.Client, FireDAC.Stan.Param,
     conexao.model;

type
  TEndereco = class

  private
    QryTemp: TFDQuery;
    FCodigo: Integer;
    FCep: string;
    FLogradouro: string;
    FComplemento: string;
    FBairro: string;
    FLocalidade: string;
    FUF: string;

    constructor Create();
    destructor Destroy; override;

  public
    procedure CarregarJSON(const JSONString: string);
    procedure CarregarXML(const AXMLString: string);
    procedure ExibirCeps(QryTemp: TFDQuery; JSONArray: TJSONArray);
    function CEPExistente(QryTemp: TFDQuery; CEP: string): Boolean;
    function GetXMLValueOrDefault(Node: IXMLNode; const TagName: string; const DefaultValue: string = ''): string;

    property Codigo: Integer read FCodigo write FCodigo;
    property Cep: string read FCep write FCep;
    property Logradouro: string read FLogradouro write FLogradouro;
    property Complemento: string read FComplemento write FComplemento;
    property Bairro: string read FBairro write FBairro;
    property Localidade: string read FLocalidade write FLocalidade;
    property UF: string read FUF write FUF;

  end;

implementation

uses Vcl.Dialogs, System.UITypes;

{ TEndereco }

constructor TEndereco.Create;
begin
  QryTemp := TFDQuery.Create(nil);
  QryTemp := TConexao.GetInstance.Connection.CriarQuery;
end;

destructor TEndereco.Destroy;
begin
  QryTemp.Free;
  inherited;
end;

procedure TEndereco.CarregarJSON(const JSONString: string);
var
  JSONValue: TJSONValue;
  JSONArray: TJSONArray;
  JSONObj: TJSONObject;
  LQuantidade: Integer;
begin
  JSONValue := TJSONObject.ParseJSONValue(JSONString);
  if Assigned(JSONValue) then
  begin
    // Verifica se o JSON é um array
    if JSONValue is TJSONArray then
    begin
      JSONArray := JSONValue as TJSONArray; // Acessa o array
      LQuantidade := JSONArray.Count; // Verifica a quantidade de objetos no array

      // Se mais de um endereço for encontrado, perguntar ao usuário
      if LQuantidade > 1 then
      begin
        if MessageDlg('Foram encontrados ' + LQuantidade.ToString + ' endereços. Deseja exibir todos?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        begin
          ExibirCeps(QryTemp, JSONArray);
          Exit;
        end
        else
        begin
          // Processa apenas o primeiro endereço se o usuário escolher 'Não'
          JSONObj := JSONArray.Items[0] as TJSONObject;
        end;
      end
      else
      begin
        // Processa o primeiro objeto se houver apenas um endereço
        JSONObj := JSONArray.Items[0] as TJSONObject;
      end;
    end
    else if JSONValue is TJSONObject then
    begin
      JSONObj := JSONValue as TJSONObject; // Se for objeto direto (um único endereço)
    end
    else
      raise Exception.Create('Erro: O JSON não é um objeto ou array válido.');

    try
      // Carrega os campos do endereço no objeto
      Cep := JSONObj.GetValue<string>('cep');
      Logradouro := JSONObj.GetValue<string>('logradouro');
      Complemento := JSONObj.GetValue<string>('complemento');
      Bairro := JSONObj.GetValue<string>('bairro');
      Localidade := JSONObj.GetValue<string>('localidade');
      UF := JSONObj.GetValue<string>('uf');
    finally
      JSONObj.Free; // Libera o objeto após uso
    end;
  end
  else
    raise Exception.Create('Erro: O objeto retornado não é um JSON válido');

end;

procedure TEndereco.CarregarXML(const AXMLString: string);
var XMLDoc: IXMLDocument;
    RootNode: IXMLNode;
begin
  XMLDoc := LoadXMLData(AXMLString);
  RootNode := XMLDoc.DocumentElement;
  if Assigned(RootNode) then
  begin
    Cep := GetXMLValueOrDefault(RootNode, 'cep');
    Logradouro := GetXMLValueOrDefault(RootNode, 'logradouro');
    Complemento := GetXMLValueOrDefault(RootNode, 'complemento');
    Bairro := GetXMLValueOrDefault(RootNode, 'bairro');
    Localidade := GetXMLValueOrDefault(RootNode, 'localidade');
    UF := GetXMLValueOrDefault(RootNode, 'uf');
  end
  else
    raise Exception.Create('Erro ao carregar o XML');
end;

procedure TEndereco.ExibirCeps(QryTemp: TFDQuery; JSONArray: TJSONArray);
begin
  try

  finally

  end;

end;

function TEndereco.CEPExistente(QryTemp: TFDQuery; CEP: string): Boolean;
begin
  Result := False;
  with QryTemp do
  begin
    SQL.Clear;
    SQL.Add('select * from tab_cep where cep = :cep');
    ParamByName('CEP').AsString := CEP;
    Open();
    if not Eof then
      Result := True;
  end;
end;

function TEndereco.GetXMLValueOrDefault(Node: IXMLNode; const TagName, DefaultValue: string): string;
begin
  if not VarIsNull(Node.ChildValues[TagName]) then
    Result := Node.ChildValues[TagName]
  else
    Result := DefaultValue;

end;

end.
